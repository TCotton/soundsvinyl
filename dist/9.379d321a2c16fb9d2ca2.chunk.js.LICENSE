/***/

/*!
 * cookie
 * Copyright(c) 2012-2014 Roman Shtylman
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */

/**
 * Module exports.
 * @public
 */

/**
 * Parse a cookie header.
 *
 * Parse the given cookie header string into an object
 * The object has the various cookies as keys(names) => values
 *
 * @param {string} str
 * @param {object} [options]
 * @return {object}
 * @public
 */

// skip things that don't look like key=value

// quoted values

// only assign once

/**
 * Serialize data into a cookie header.
 *
 * Serialize the a name value pair into a cookie string suitable for
 * http headers. An optional options object specified cookie parameters.
 *
 * serialize('foo', 'bar', { httpOnly: true })
 *   => "foo=bar; httpOnly"
 *
 * @param {string} name
 * @param {string} val
 * @param {object} [options]
 * @return {string}
 * @public
 */

/**
 * Try decoding a string using a decoding function.
 *
 * @param {string} str
 * @param {function} decode
 * @private
 */

/**
 * Module variables.
 * @private
 */

// place this in a lifecycle hook

// go back to previous page

// `user/add`

// extracted by mini-css-extract-plugin

// EXTERNAL MODULE: ./node_modules/universal-cookie/node_modules/cookie/index.js

// CONCATENATED MODULE: ./node_modules/universal-cookie/es6/utils.js

// JSDOM does not support changing cookies, disable it for tests

// Can we get/set cookies on document.cookie?

// express prepend j: before serializing a cookie

// CONCATENATED MODULE: ./node_modules/universal-cookie/es6/Cookies.js

// We can't please Rollup and TypeScript at the same time

// Only way to make both of them work

// We guess if the cookie start with { or [, it has been serialized

// At least we tried

// Ignore clean value if we failed the deserialization

// It is not relevant anymore to trim those values

/** @class */
